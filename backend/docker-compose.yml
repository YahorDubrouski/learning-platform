version: '3.8'

services:
  php:
    build:
      dockerfile: ./docker/php/Dockerfile
    container_name: ${PROJECT_NAME}_php
    restart: unless-stopped
    volumes:
      - ./:/var/www/html
      - ./docker/php/usr/local/etc/php/php.ini:/usr/local/etc/php/php.ini
      - ./docker/php/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    networks:
      - app-network
    environment:
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - COGNITO_REGION=${COGNITO_REGION}
      - SERVER_NAME=${SERVER_NAME:-learning-platform.com}
      - XDEBUG_MODE=${XDEBUG_MODE}
      - XDEBUG_START_WITH_REQUEST=${XDEBUG_START_WITH_REQUEST}
      - XDEBUG_CLIENT_HOST=${XDEBUG_CLIENT_HOST}
      - XDEBUG_CLIENT_PORT=${XDEBUG_CLIENT_PORT}
      - XDEBUG_IDEKEY=${XDEBUG_IDEKEY}

  nginx:
    build:
      dockerfile: ./docker/nginx/Dockerfile
    container_name: ${PROJECT_NAME}_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/certs/server.crt:/etc/nginx/certs/server.crt
      - ./docker/nginx/certs/server.key:/etc/nginx/certs/server.key
      - ./docker/nginx/etc/nginx/snippets/fastcgi-php.conf:/etc/nginx/snippets/fastcgi-php.conf
    depends_on:
      - php
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: ${PROJECT_NAME}_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - app-network

  node:
    image: node:16
    container_name: ${PROJECT_NAME}_node
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
      - app-network
    command: bash -c "npm install && npm run dev"

volumes:
  dbdata:

networks:
  app-network:
